#!/bin/bash
#Helper script for generating my gungeon mod's .csproj file

#Important top level variables
namespace="CwaffingTheGungy"                     #namespace used throughout source code; need to change for my own mod eventually
projectname="CwaffingTheGungy"                   #name of the DLL to create
projfile="./CwaffingItems.csproj"                #the name of the csproj file to generate
sourcechecksums="./_${namespace}-checksums-src"  #file containing checksums of all source files to determing recompilation
audiochecksums="./_${namespace}-checksums-audio" #file containing checksums of all source files to determing recompilation
dllname="./bin/Debug/${projectname}.dll"         #DLL name is directly based on the project name

#Base directory we're copying our plugin to
plugindir="/xmedia/pretzel/Steam/steamapps/common/Enter the Gungeon/BepInEx/plugins"
pluginspritesdir="${plugindir}/sprites" #plugin sprite directory

#Easy colors (condensed)
  BLN="\e[0m"   ; UND="\e[1;4m" ; INV="\e[1;7m" ; CRT="\e[1;41m";
  BLK="\e[1;30m"; RED="\e[1;31m"; GRN="\e[1;32m"; YLW="\e[1;33m";
  BLU="\e[1;34m"; MGN="\e[1;35m"; CYN="\e[1;36m"; WHT="\e[1;37m";

#Variable tracking if anything actually needs to be rebuilt
rebuild=0

sources=()  #Array of source files
includes=() #Array of items to include in the base project file
externs=()  #Array of external resource to copy over to the EtG plugins/sprites directory

#Manually populated includes
includes+=('<None Include="packages.config" />')
includes+=('<Reference Include="System" />') #needed for LinkedList
# includes+=('<Folder Include="Characters\Acolyte\newspritesetup\custom\" />')
# includes+=('<Folder Include="Characters\Shade\newspritesetup\custom\" />')
# includes+=('<Reference Include="Ionic.Zip, Version=1.9.1.8"/>')

#Regenerate audio sources

echo -e "[${GRN}>${BLN}] Checking for changes to audio files"
updateaudio=0
if [ ! -e "./Resources/Sounds/${namespace}.bnk" ]; then
  echo -e "[${GRN}>${BLN}]   Audio bank does not exist, regenerating sound bank"
  updateaudio=1
elif [ ! -e "${audiochecksums}" ]; then
  echo -e "[${GRN}>${BLN}]   Audio checksum file does not exist, regenerating sound bank"
  updateaudio=1
else
  #Checksum all files in the audio directory, then take a checksum of the checksum file
  #  and compare it to the existing checksum file
  find "Resources" -type f -path "*.wav" -exec md5sum '{}' \; > "${audiochecksums}.new"
  c1="$(md5sum "${audiochecksums}" | cut -f 1 -d ' ')"
  c2="$(md5sum "${audiochecksums}.new" | cut -f 1 -d ' ')"
  /bin/rm "${audiochecksums}.new"
  if [[ "${c1}" != "${c2}" ]]; then
    echo -e "[${GRN}>${BLN}]   At least one audio file was changed, rebuilding sound bank and project"
    updateaudio=1
  else
    echo -e "[${GRN}>${BLN}]   No audio files changed, skipping sound bank generation"
  fi
fi

if [ $updateaudio -eq 1 ]; then
  rebuild=1
  echo -e "[${GRN}>${BLN}] Regenerating audio bank"
  ./gen-gungeon-audio-bank.py -Or -s "./Resources/Sounds/sound_info.csv" "./Resources/Sounds" "${namespace}"

  echo -e "[${GRN}>${BLN}]   Regenerating checksums for audio files"
  /bin/rm -f "${audiochecksums}"
  while read -r afile; do
    echo "$(md5sum "${afile}")" >> "${audiochecksums}"
  done <<< $(find "Resources" -type f -path "*.wav")
fi

#Source files
echo -e "[${GRN}>${BLN}] Scanning for source files"
while read -r line; do
  [[ "$line" =~ \\_ ]] && continue; # skip any filename beginning with an underscore
  includes+=("<Compile Include=\"${line}\" />")
  sources+=("${line}")
done <<< $(find "src" -type f -not -path "src/StandardAPI/ItemAPI/Examples/*" -not -path "src/StandardAPI/ItemAPI/FakePrefab/*" -not -path "src/SpriteBuilder.cs" | sed -r 's@/@\\@g')

#Custom Character Embedded resources (none for now)
# echo -e "[${GRN}>${BLN}] Scanning for custom characters"
# while read -r line; do
#   includes+=("<EmbeddedResource Include=\"${line}\" />")
# done <<< $(find "Characters" -type f | sed -r 's@/@\\@g')

#Normal Embedded resources
echo -e "[${GRN}>${BLN}] Scanning for resources"
while read -r line; do
  includes+=("<EmbeddedResource Include=\"${line}\" />")
done <<< $(find "Resources" -type f -not -path "*.wav" -not -path "*.csv" | sed -r 's@/@\\@g')

#Unversioned EtG Unity Packages (skipping version numbers because there's no way to tell just by looking and it was causing problems)
echo -e "[${GRN}>${BLN}] Scanning for EtG DLLs"
while read -r line; do
  includes+=("<Reference Include=\"$(echo "$line" | rev | cut -f 1 -d '\' | cut -f 2- -d '.' | rev)\"/>")
done <<< $(find "packages/EtG.UnityEngine.1.0.0" -path "*.dll" | sed -r 's@/@\\@g')

#Versioned packages, net35
echo -e "[${GRN}>${BLN}] Scanning for net35 DLLs"
while read -r line; do
  includes+=("<Reference Include=\"$(echo "$line" | rev | cut -f 1 -d '\' | cut -f 2- -d '.' | rev)\"/>")
done <<< $(find "packages" -path "*net35*.dll" | sed -r 's@/@\\@g')

#Copy over external resources as necessary
echo -e "[${GRN}>${BLN}] Copying over updated external resources"
while read -r line; do
  localrelpath="$(echo "${line}" | cut -f 2- -d '/')"
  externpath="${pluginspritesdir}/${localrelpath}"
  externmodtime="$(stat -c '%y' "${externpath}")"
  localmodtime="$(stat -c '%y' "${line}")"
  if [[ "$localmodtime" > "$externmodtime" ]]; then
    echo -e "[${GRN}>${BLN}]   Copying ${localrelpath}"
    /bin/cp "${line}" "${externpath}"
  fi
done <<< $(find "ResourcesExternal" -type f)

#Generate the template .csproj file
echo -e "[${GRN}>${BLN}] Generating .csproj template"
template=`cat <<'HERE'
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <LangVersion>latest</LangVersion>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{52A82040-5BED-4ACB-9894-41A595F284CB}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>%s</RootNamespace>
    <AssemblyName>%s</AssemblyName>
    <TargetFrameworkVersion>v3.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <Deterministic>true</Deterministic>
    <NuGetPackageImportStamp>
    </NuGetPackageImportStamp>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <LangVersion>latest</LangVersion>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <LangVersion>latest</LangVersion>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    %s
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Import Project=".\packages\BepInEx.Core.5.4.21\build\BepInEx.Core.targets" Condition="Exists('.\packages\BepInEx.Core.5.4.21\build\BepInEx.Core.targets')" />
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('.\packages\BepInEx.Core.5.4.21\build\BepInEx.Core.targets')" Text="$([System.String]::Format('$(ErrorText)', '.\packages\BepInEx.Core.5.4.21\build\BepInEx.Core.targets'))" />
  </Target>
</Project>
HERE`

#Escape all of the backslashes for printf
template="$(echo "$template" | sed -r 's@\\@\\\\@g')"
#Generate our substitution from our includes array
replace="$(printf "%s\n" "${includes[@]}")"

echo -e "[${GRN}>${BLN}] Substituting .csproj template"
#Get old checksum of generated csproj file
oldchecksum="$(md5sum "$projfile" | cut -f 1 -d ' ')"
#Invoke the substitution and create our projects file
printf "$template" "$namespace" "$projectname" "$replace" | xmllint --format - > "${projfile}.new"
#Get new checksum of generated csproj file
newchecksum="$(md5sum "${projfile}.new" | cut -f 1 -d ' ')"

#Compare .csproj checksums and clobber the old .csproj file as necessary
if [ "$oldchecksum" == "$newchecksum" ]; then
  echo -e "[${GRN}>${BLN}]   No changes to .csproj file!"
  /bin/rm "${projfile}.new"
else
  echo -e "[${GRN}>${BLN}]   New .csproj file generated, rebuilding project"
  /bin/rm "${projfile}"
  /bin/mv "${projfile}.new" "${projfile}"
  rebuild=1
fi

#Compare source file checksums to see if we need to rebuild
if [ $rebuild -eq 0 ]; then
  echo -e "[${GRN}>${BLN}] Checking if any source files were changed"
  if [ ! -e "${sourcechecksums}" ]; then
    echo -e "[${GRN}>${BLN}]   Source checksum file does not exist, rebuilding project"
    rebuild=1
  else
    md5sum --status -c "${sourcechecksums}"
    if [ $? -gt 0 ]; then
      echo -e "[${GRN}>${BLN}]   At least one source file was changed, rebuilding project"
      rebuild=1
    else
      echo -e "[${GRN}>${BLN}]   No source files changed"
    fi
  fi
fi

if [ ! -e "${dllname}" ]; then
  echo -e "[${GRN}>${BLN}] ${dllname} does not exist, forcing rebuild"
  rebuild=1
fi

if [ $rebuild -eq 1 ]; then
  #Remove old DLL file
  /bin/rm -f "${dllname}"

  #Recompute checksums for source file
  echo -e "[${GRN}>${BLN}] Recomputing source file checksums"
  /bin/rm -f "${sourcechecksums}"
  for source in "${sources[@]}"; do
    s="$(echo "${source}" | sed -re 's@\\@/@g')"
    echo "$(md5sum "${s}")" >> "${sourcechecksums}"
  done

  #Don't warn about unused variables (semicolon delimited)
  nowarn="CS0414"

  #Actually rebuild the project
  echo -e "[${GRN}>${BLN}] Building project"
  msbuild -noLogo -warnAsMessage:"${nowarn}" -v:minimal -clp:"Summary;Verbosity=minimal"
  if [ $? -gt 0 ]; then
    echo -e "[${RED}@${BLN}] Build failed! D: Check errors above"
    exit
  else
    echo -e "[${GRN}>${BLN}] Build succeeded! :D"
  fi

  #Import the mod into the plugins folder
  echo -e "[${GRN}>${BLN}] Importing ${dllname} to EtG plugins directory"
  /bin/cp "$dllname" "$plugindir"
fi

#Launch the game if "-g" flag was passed
if [ $# -gt 0 ] && [ "$1" == "-g" ]; then
  echo -e "[${GRN}>${BLN}] Launching!"
  gungy-modded
fi

